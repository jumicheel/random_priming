load("C:/Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/experiment1_input.RData")
knitr::opts_chunk$set(echo = TRUE)
## load libraries
library(DT)
library(tidyverse)
library(AnnotationHub) #gene and transcript info from ensembldb via annotationhub
library(ensembldb)
library(UpSetR) #upset plot
## tst_JM_029_5000000_HBr_tpm is used as input; it includes gene id, gene length and TPM values (RSEM output)
HBr_wf <- tst_JM_029_5000000_HBr_tpm
## the column gene_id is "copied" into "genes"
genes <-  HBr_wf$gene_id
## from the gene ids the part after the dot is removed // cropping the gene ids
genes1<-gsub("\\..*","",genes)
## genes1 (the cropped version of the gene ids) is added to DFs (and called genes in there)
HBr_wf$genes<-genes1
## get gene and transcript info (data is saved in the .RData input file so this part of code doesn't need to be run)
#human_ens <- query(AnnotationHub(), c("homo sapiens", "EnsDb"))
#human_ens <- human_ens[["AH98047"]]
#gen <- genes(human_ens, return.type = "data.frame")
#trans <- transcripts(human_ens, return.type = "data.frame")
##HBr_wf and the gene_IDs_hsa are merged by genes/ensembl_gene_id
df_HBr <- HBr_wf %>% full_join(., gen, by = c("genes" = "gene_id"))
## create a sample column based on the filename
df_HBr$sample <- gsub("_5000000_trim_clean.genes.results", "", df_HBr$filename)
df_HBr$sample <- gsub("no0..-0_tst_JM_029_", "", df_HBr$sample)
df_HBr$sample <- gsub("_HBr_", "", df_HBr$sample)
##renaming all column names of the tables df_HBr
names(df_HBr) <- c("filename", "gene_id_version", "length", "tpm", "primer", "genes", "gene_name", "biotype", "gene_start", "gene_end", "seq_name", "seq_strand", "seq_coord_system", "description", "gene_id_version2", "canonical_transcript", "external_gene_name", "entrez_id", "sample")
##all pseudogene types are collected as "pseudogene" in column bio
df_HBr$bio<-ifelse(grepl("*pseudogene*",df_HBr$biotype), "pseudogene", df_HBr$biotype)
## subgroup least abundant bio types in column bio (stacked bar plot input)
df_HBr$bio<-ifelse(grepl("IG", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("TR_C_gene", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("vault_RNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("misc_RNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("scaRNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("TEC", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("Mt", df_HBr$bio), "mitochondrial RNAs", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("rRNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("miRNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("artifact", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("sRNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("ribozyme", df_HBr$bio), "other", df_HBr$bio)
## some genes don't have information in ensembl, so biotype, gc content etc are missing (NAs) --> converted to bio "other"
df_HBr <- df_HBr %>% replace_na(list(bio="other"))
df_HBr <- df_HBr %>% dplyr::filter(!str_detect(string = gene_id_version, pattern = "PAR_Y"))
df_HBr <- df_HBr %>%
drop_na("tpm")
##TPM cutoff 1
df_HBr_filt <- df_HBr %>% dplyr::filter(tpm >= 1)
df_HBr_filt$sample <- factor(df_HBr_filt$sample, levels = c("6mer1", "6mer2", "6mer3","12mer1", "12mer2", "12mer3","18mer1", "18mer2", "18mer3","24mer1", "24mer2", "24mer3"))
df_HBr_filt$bio <- factor(df_HBr_filt$bio, levels = c("protein_coding", "lncRNA", "pseudogene", "snRNA", "snoRNA", "scRNA", "mitochondrial RNAs", "other"))
biotype_bar <- df_HBr_filt %>%
dplyr::count(sample, bio, wt=tpm, name="tpm") %>%
ggplot(., aes(fill=bio, x=sample, y=tpm)) +
geom_bar(position=position_stack(reverse = TRUE), stat="identity")  +
scale_fill_brewer(palette = "Paired", name = "biotype", labels = c("protein coding", "lncRNA", "pseudogene", "snRNA",    "snoRNA", "scRNA", "mitochondrial RNA", "other")) +
scale_x_discrete(expand=c(0,0)) +
scale_y_continuous(labels= function(x) paste0(x*100/1000000, "%"), expand=c(0,0)) +
labs(x="", y="TPM (%)")  +
theme_classic() +
coord_flip()
biotype_bar
##generate table from long format table %>% number of genes per bio type in each sample %>% convert to wide format
biotype_table_HBr <- df_HBr_filt %>%
dplyr::count(sample, bio) %>%
pivot_wider(names_from = bio, values_from = n)
datatable(biotype_table_HBr)
genecount_dist <- df_HBr_filt %>%
group_by(sample, gene_id_version) %>%
summarise(genes=n_distinct(gene_id_version))
genecount_sum <- aggregate(genecount_dist$genes, by=list(Category=genecount_dist$sample), FUN=sum)
genecount_sum$primer <- genecount_sum$Category
genecount_sum$primer <- gsub(".{1}$", "", genecount_sum$primer)
genecount_sum$primer <- factor(genecount_sum$primer, levels= c("6mer", "12mer", "18mer", "24mer"))
total_genes <- genecount_sum %>%
ggplot(., aes(x = primer, y = x, fill = primer, color = primer, alpha = primer)) +
geom_boxplot(width=0.5, lwd=1) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=1, alpha=1, color = "black") +
scale_fill_manual("legend", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_color_manual("primer", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_alpha_manual(values = c(0.4,0.4,0.4,0.4)) +
scale_y_continuous(trans = "log10" ) +
labs(x="", y="Number of genes detected (TPM >= 1)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust=0.7), legend.position = "none") +
guides(fill = "none")
total_genes
biotype_HBr_lf <- df_HBr_filt %>%
dplyr::count(sample, biotype)
biotype_HBr_lf <- biotype_HBr_lf %>%
dplyr::mutate(biotype = ifelse(grepl("pseudo", biotype_HBr_lf$biotype), "pseudogene", biotype_HBr_lf$biotype)) %>%
dplyr::group_by(sample, biotype) %>%
dplyr::summarize(across(everything(), ~sum(.x))) %>%
dplyr::ungroup()
biotype_HBr_lf$primer <- biotype_HBr_lf$sample
biotype_HBr_lf$primer <- gsub(".{1}$","", biotype_HBr_lf$primer)
biotype_HBr_lf$primer <- factor(biotype_HBr_lf$primer, levels= c("6mer", "12mer", "18mer", "24mer"))
biotype_HBr_lf$biotype <- factor(biotype_HBr_lf$biotype, levels= c("protein_coding", "lncRNA", "pseudogene", "snoRNA", "snRNA"))
biotype_counts <- biotype_HBr_lf %>%
dplyr::filter(biotype %in% c("snoRNA", "snRNA", "lncRNA", "pseudogene","protein_coding" )) %>%
ggplot(., aes(x = reorder(primer, primer), y = n, fill = primer,  alpha = primer, color = primer)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center', dotsize=1, alpha=1, color = "black") +
scale_fill_manual("legend", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_color_manual("legend", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_alpha_manual(values = c(0.4,0.4,0.4,0.4)) +facet_wrap(.~ case_when(biotype == "pseudogene" ~ "pseudogene", biotype == "lncRNA" ~ "lncRNA", biotype == "snRNA" ~ "snRNA", biotype == "snoRNA" ~ "snoRNA", biotype == "protein_coding" ~ "protein coding"), scales = "free_y") +
labs(title="", x="", y="Number of genes (TPM >= 1)") +
theme_classic() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, vjust=0.7))
biotype_counts
hb_data <- df_HBr_filt %>%
as.tibble()
# transform tpm -> log10_tpm & cut into bins from log10_tpm = 0 to 5.5
hb_data_1 <- hb_data %>%
group_by(sample) %>%
mutate(log_tpm = log10(tpm)) %>%
mutate(bin = cut(log_tpm, include.lowest = T, breaks = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5))) %>%
mutate(sample2 = str_sub(sample, end = -2),
replicate = str_sub(sample, -1)) %>%
ungroup()
# the 'count' column counts in how many replicates the genes were detected
hb_data_2 <- hb_data_1 %>%
group_by(genes, sample2) %>%
summarise(count = n())
# function to get the s.e.m.
std <- function(x) sd(x)/sqrt(length(x))
# add 'count' column to original df (hb_data_1)
hb_data_3 <- hb_data_1 %>%
left_join(.,hb_data_2, by = c("genes", "sample2"))  %>%
distinct() %>%
# calculate ave count per bin in each sample -> convert to %
dplyr::select(genes, sample2, bin, count) %>%
mutate(percent = count/3*100) %>%
group_by(sample2, bin) %>%
summarise(ave_perc = mean(percent), sem = std(percent)) %>%
mutate(clean_bin = str_sub(bin, start = 2, end = 6),
clean_bin = str_replace(clean_bin, ",", " - "),
clean_sample = sample2)
hb_data_3$clean_sample <- factor(hb_data_3$clean_sample, levels= c("6mer", "12mer", "18mer", "24mer"))
tpm_detection <- hb_data_3 %>%
ggplot(aes(x = clean_bin, y= ave_perc, group = clean_sample)) +
geom_line(aes(color = clean_sample), size = 1, alpha = 0.4) +
geom_point(aes(color = clean_sample)) +
scale_colour_manual( values = c("6mer" ="#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" = "#CCBB44")) +
geom_linerange(aes(ymin = ave_perc-sem, ymax = ave_perc+sem))+
labs(title="", x = "TPM, log10", y = "Gene detection (%)", color = "primer") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
tpm_detection
hbr_read_gene <- rbind(tst_JM_029_6mer_HBr_tpm, tst_JM_029_12mer_HBr_tpm, tst_JM_029_18mer_HBr_tpm, tst_JM_029_24mer_HBr_tpm)
### count number of genes per primer replicate per subsample
hbr_read_gene <- hbr_read_gene %>% dplyr::filter(TPM >= 1)
#add primer column based on filename
hbr_read_gene$primer <- gsub("no0..-0_tst_JM_029_","", hbr_read_gene$filename)
hbr_read_gene$primer <- gsub("\\_.*","", hbr_read_gene$primer)
#add sample column based on primer column + filename
hbr_read_gene$sample <- paste0(hbr_read_gene$primer, gsub("^(?:[^_]+_){6}([^_]+).*", "\\1", hbr_read_gene$filename))
hbr_read_gene_count <- hbr_read_gene %>%
dplyr::count(sample, subsample) %>%
pivot_wider(names_from = subsample, values_from = n)
hbr_read_gene_count_lf <- hbr_read_gene_count %>%
pivot_longer(!sample, names_to = "reads", values_to = "genes")
hbr_read_gene_count_lf$reads <- factor(hbr_read_gene_count_lf$reads, levels= c("156250", "312500", "625000", "1250000", "2500000", "5e+06", "1e+07"))
hbr_read_gene_count_lf$primer <- gsub(".{1}$","", hbr_read_gene_count_lf$sample)
hbr_read_gene_count_lf$primer <- factor(hbr_read_gene_count_lf$primer, levels= c("6mer", "12mer", "18mer", "24mer"))
# function to get the s.e.m.
std <- function(x) sd(x)/sqrt(length(x))
mean_genes <- hbr_read_gene_count_lf %>%
group_by(primer, reads) %>%
summarise(ave = mean(genes), sem = std(genes))
rvsg_labels <- c("156,250", "312,500", "625,000", "1,250,000", "2,500,000", "5,000,000", "10,000,000")
reads_vs_genes <- mean_genes %>%
ggplot(aes(x = reads, y= ave , group = primer)) +
geom_line(aes(color = primer), alpha = 0.5, size = 1) +
geom_point(aes(color = primer), alpha = 1) +
scale_colour_manual( values = c("6mer" ="#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" = "#CCBB44")) +
geom_linerange(aes(ymin = ave-sem, ymax = ave+sem), alpha=0.5)+
theme_classic() +
labs(x = "Number of reads", y = "Number of genes detected (TPM >= 1)", color = "primer") +
scale_x_discrete(labels= rvsg_labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
reads_vs_genes
View(hbr_read_gene)
### count number of genes per primer replicate per subsample
hbr_read_gene <- hbr_read_gene %>% dplyr::filter(TPM >= 1)
hbr_read_gene_count <- hbr_read_gene %>%
dplyr::count(sample, subsample) %>%
pivot_wider(names_from = subsample, values_from = n)
View(hbr_read_gene_count)
View(hbr_read_gene_count_lf)
mean_genes <- hbr_read_gene_count_lf %>%
group_by(primer, reads) %>%
summarise(ave = mean(genes), sd = sd(genes))
rvsg_labels <- c("156,250", "312,500", "625,000", "1,250,000", "2,500,000", "5,000,000", "10,000,000")
reads_vs_genes <- mean_genes %>%
ggplot(aes(x = reads, y= ave , group = primer)) +
geom_line(aes(color = primer), alpha = 0.5, size = 1) +
geom_point(aes(color = primer), alpha = 1) +
scale_colour_manual( values = c("6mer" ="#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" = "#CCBB44")) +
geom_linerange(aes(ymin = ave-sd, ymax = ave+sd), alpha=0.5)+
theme_classic() +
labs(x = "Number of reads", y = "Number of genes detected (TPM >= 1)", color = "primer") +
scale_x_discrete(labels= rvsg_labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
reads_vs_genes
View(mean_genes)
knitr::opts_chunk$set(echo = TRUE)
fig1_grid2 <- grid.arrange(reads_vs_genes, ncol = 1)
library(gridExtra)
fig1_grid2 <- grid.arrange(reads_vs_genes, ncol = 1)
fig1_grid2
ggsave(file="fig1_grid2.svg",
width = 8.5,
height = 9,
units = c("cm"),
plot = fig1_grid2)
load("C:/Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/experiment2_input3.RData")
load("C:/Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/experiment2_input4.RData")
load("C:/Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/experiment2_input3.RData")
load("C:/Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/experiment2_input2.RData")
load("C:/Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/experiment2_input1.RData")
load("C:/Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/experiment2_input5.RData")
knitr::opts_chunk$set(echo = TRUE)
## load libraries
library(DT)
library(tidyverse)
library(AnnotationHub) #gene and transcript info from ensembldb via annotationhub
library(ensembldb)
library(UpSetR) #upset plot
## tst_JM_040_genes_30000000 is used as input; it includes gene id, gene length and TPM values (RSEM output)
HBr_wf <- tst_JM_040_genes_30000000
## the column gene_id is "copied" into "genes"
genes <-  HBr_wf$gene_id
## from the gene ids the part after the dot is removed // cropping the gene ids
genes1<-gsub("\\..*","",genes)
## genes1 (the cropped version of the gene ids) is added to DFs (and called genes in there)
HBr_wf$genes<-genes1
## get gene and transcript info (data is saved in the .RData input file so this part of code doesn't need to be run)
#human_ens <- query(AnnotationHub(), c("homo sapiens", "EnsDb"))
#human_ens <- human_ens[["AH98047"]]
#gen <- genes(human_ens, return.type = "data.frame")
#trans <- transcripts(human_ens, return.type = "data.frame")
##HBr_wf and the gene_IDs_hsa are merged by genes/ensembl_gene_id
df_HBr <- HBr_wf %>% full_join(., gen, by = c("genes" = "gene_id"))
##renaming all column names of the tables df_HBr
names(df_HBr) <- c("filename", "gene_id", "transcript_ids", "length", "effective_length", "expected_count", "tpm", "FPKM", "sample", "primer", "subsample", "genes", "external_gene_name", "biotype", "gene_start", "gene_end", "seq_name", "seq_strand", "seq_coord_system", "description", "gene_id_version", "canonical_transcript", "external_gene_name2", "entrez_id")
##all pseudogene types are collected as "pseudogene" in column bio
df_HBr$bio<-ifelse(grepl("*pseudogene*",df_HBr$biotype), "pseudogene", df_HBr$biotype)
## subgroup least abundant bio types in column bio (stacked bar plot input)
df_HBr$bio<-ifelse(grepl("IG", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("TR", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("vault_RNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("misc_RNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("scaRNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("TEC", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("Mt", df_HBr$bio), "mitochondrial RNAs", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("rRNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("miRNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("artifact", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("sRNA", df_HBr$bio), "other", df_HBr$bio)
df_HBr$bio<-ifelse(grepl("ribozyme", df_HBr$bio), "other", df_HBr$bio)
## some genes don't have information in ensembl, so biotype, gc content etc are missing (NAs) --> converted to bio "other"
df_HBr <- df_HBr %>% replace_na(list(bio="other"))
df_HBr <- df_HBr %>% dplyr::filter(!str_detect(string = gene_id, pattern = "PAR_Y"))
df_HBr <- df_HBr %>%
drop_na("tpm")
##TPM cutoff 1
df_HBr_filt <- df_HBr %>% dplyr::filter(tpm >= 1)
df_HBr_filt$sample <- factor(df_HBr_filt$sample, levels = c("6mer1", "6mer2", "6mer3", "12mer1", "12mer2", "12mer3","18mer1", "18mer2", "18mer3","24mer1", "24mer2", "24mer3"))
df_HBr_filt$bio <- factor(df_HBr_filt$bio, levels = c("protein_coding", "lncRNA", "pseudogene", "snRNA", "snoRNA", "scRNA", "mitochondrial RNAs", "other"))
biotype_bar <- df_HBr_filt %>%
count(sample, bio, wt=tpm, name="tpm") %>%
ggplot(., aes(fill=bio, x=sample, y=tpm)) +
geom_bar(position=position_stack(reverse = TRUE), stat="identity")  +
scale_fill_brewer(palette = "Paired", name = "biotype", labels = c("protein coding", "lncRNA", "pseudogene", "snRNA", "snoRNA", "scRNA", "mitochondrial RNA", "other")) +
scale_x_discrete(expand=c(0,0)) +
scale_y_continuous(labels= function(x) paste0(x*100/1000000, "%"), expand=c(0,0)) +
labs(x="", y="TPM (%)")  +
theme_classic() +
coord_flip()
biotype_bar
##generate table from long format table %>% number of genes per bio type in each sample %>% convert to wide format
biotype_table_HBr <- df_HBr_filt %>%
count(sample, bio) %>%
pivot_wider(names_from = bio, values_from = n)
datatable(biotype_table_HBr)
genecount_dist <- df_HBr_filt %>%
group_by(sample, gene_id) %>%
summarise(genes=n_distinct(gene_id))
genecount_sum <- aggregate(genecount_dist$genes, by=list(Category=genecount_dist$sample), FUN=sum)
genecount_sum$primer <- genecount_sum$Category
genecount_sum$primer <- gsub(".{1}$", "", genecount_sum$primer)
genecount_sum$primer <- factor(genecount_sum$primer, levels= c("6mer", "12mer", "18mer", "24mer"))
total_genes <- genecount_sum %>%
ggplot(., aes(x = primer, y = x, fill = primer, color = primer, alpha = primer)) +
geom_boxplot(width=0.5, lwd=1) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=1, alpha=1, color = "black") +
scale_fill_manual("legend", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_color_manual("primer", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_alpha_manual(values = c(0.4,0.4,0.4,0.4)) +
scale_y_continuous(trans = "log10" ) +labs(x="", y="Number of genes detected (TPM >= 1)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust=0.7), legend.position = "none") +
guides(fill = "none")
total_genes
biotype_HBr_lf <- df_HBr_filt %>%
count(sample, biotype)
biotype_HBr_lf <- biotype_HBr_lf %>%
dplyr::mutate(biotype = ifelse(grepl("pseudo", biotype_HBr_lf$biotype), "pseudogene", biotype_HBr_lf$biotype)) %>%
dplyr::group_by(sample, biotype) %>%
dplyr::summarize(across(everything(), ~sum(.x))) %>%
dplyr::ungroup()
biotype_HBr_lf$primer <- biotype_HBr_lf$sample
biotype_HBr_lf$primer <- gsub(".{1}$","", biotype_HBr_lf$primer)
biotype_HBr_lf$primer <- factor(biotype_HBr_lf$primer, levels= c("6mer", "12mer", "18mer", "24mer"))
biotype_HBr_lf$biotype <- factor(biotype_HBr_lf$biotype, levels= c("protein_coding", "lncRNA", "pseudogene", "snoRNA", "snRNA"))
biotype_counts <- biotype_HBr_lf %>%
dplyr::filter(biotype %in% c("snoRNA", "snRNA", "lncRNA", "pseudogene","protein_coding" )) %>%
ggplot(., aes(x = reorder(primer, primer), y = n, fill = primer,  alpha = primer, color = primer)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center', dotsize=1, alpha=1, color = "black") +
scale_fill_manual("legend", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_color_manual("legend", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_alpha_manual(values = c(0.4,0.4,0.4,0.4)) +facet_wrap(.~ case_when(biotype == "pseudogene" ~ "pseudogene", biotype == "lncRNA" ~ "lncRNA", biotype == "snRNA" ~ "snRNA", biotype == "snoRNA" ~ "snoRNA", biotype == "protein_coding" ~ "protein coding"), scales = "free_y") +
labs(title="", x="", y="Number of genes (TPM >= 1)") +
theme_classic() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, vjust=0.7))
biotype_counts
hb_data <- df_HBr_filt %>%
as.tibble()
# transform tpm -> log10_tpm & cut into bins from log10_tpm = 0 to 5.5
hb_data_1 <- hb_data %>%
group_by(sample) %>%
mutate(log_tpm = log10(tpm)) %>%
mutate(bin = cut(log_tpm, include.lowest = T, breaks = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5))) %>%
mutate(sample2 = str_sub(sample, end = -2),
replicate = str_sub(sample, -1)) %>%
ungroup()
# the 'count' column counts in how many replicates the genes were detected
hb_data_2 <- hb_data_1 %>%
group_by(genes, sample2) %>%
summarise(count = n())
# function to get the s.e.m.
std <- function(x) sd(x)/sqrt(length(x))
# add 'count' column to original df (hb_data_1)
hb_data_3 <- hb_data_1 %>%
left_join(.,hb_data_2, by = c("genes", "sample2"))  %>%
distinct() %>%
# calculate ave count per bin in each sample -> convert to %
dplyr::select(genes, sample2, bin, count) %>%
mutate(percent = count/3*100) %>%
group_by(sample2, bin) %>%
summarise(ave_perc = mean(percent), sem = std(percent)) %>%
mutate(clean_bin = str_sub(bin, start = 2, end = 6),
clean_bin = str_replace(clean_bin, ",", " - "),
clean_sample = sample2)
hb_data_3$clean_sample <- factor(hb_data_3$clean_sample, levels= c("6mer", "12mer", "18mer", "24mer"))
tpm_detection <- hb_data_3 %>%
ggplot(aes(x = clean_bin, y= ave_perc, group = clean_sample)) +
geom_line(aes(color = clean_sample), size = 1) +
geom_point(aes(color = clean_sample)) +
scale_colour_manual( values = c("6mer" ="#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" = "#CCBB44")) +
geom_linerange(aes(ymin = ave_perc-sem, ymax = ave_perc+sem))+
labs(title="", x = "TPM, log10", y = "gene detection [%]", color = "primer") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
tpm_detection
hbr_read_gene <- rbind(tst_JM_040_genes_6mer, tst_JM_040_genes_12mer, tst_JM_040_genes_18mer, tst_JM_040_genes_24mer)
### count number of genes per primer replicate per subsample
hbr_read_gene <- hbr_read_gene %>% dplyr::filter(TPM >= 1)
hbr_read_gene_count <- hbr_read_gene %>%
count(sample, subsample) %>%
pivot_wider(names_from = subsample, values_from = n)
hbr_read_gene_count_lf <- hbr_read_gene_count %>%
pivot_longer(!sample, names_to = "reads", values_to = "genes")
hbr_read_gene_count_lf$reads <- factor(hbr_read_gene_count_lf$reads, levels= c("156250", "312500", "625000", "1250000", "2500000", "5000000", "10000000", "15000000", "20000000", "30000000"))
hbr_read_gene_count_lf$primer <- hbr_read_gene_count_lf$sample
hbr_read_gene_count_lf$primer <- gsub(".{1}$","", hbr_read_gene_count_lf$primer)
hbr_read_gene_count_lf$primer <- factor(hbr_read_gene_count_lf$primer, levels= c("6mer", "12mer", "18mer", "24mer"))
# function to get the s.e.m.
std <- function(x) sd(x)/sqrt(length(x))
mean_genes <- hbr_read_gene_count_lf %>%
group_by(primer, reads) %>%
summarise(ave = mean(genes), sem = std(genes))
reads_vs_genes <- mean_genes %>%
dplyr::filter(reads != c("156250", "312500", "625000", "1250000")) %>%
ggplot(aes(x = reads, y= ave , group = primer)) +
geom_line(aes(color = primer), alpha = 0.5, size = 1) +
geom_point(aes(color = primer), alpha = 1) +
scale_colour_manual( values = c("6mer" ="#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" = "#CCBB44")) +
geom_linerange(aes(ymin = ave-sem, ymax = ave+sem), alpha=0.5)+
theme_classic() +
labs(x = "Number of reads", y = "Number of genes detected (TPM >= 1)", color = "primer") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
reads_vs_genes
mean_genes <- hbr_read_gene_count_lf %>%
group_by(primer, reads) %>%
summarise(ave = mean(genes), sd = sd(genes))
reads_vs_genes <- mean_genes %>%
dplyr::filter(reads != c("156250", "312500", "625000", "1250000")) %>%
ggplot(aes(x = reads, y= ave , group = primer)) +
geom_line(aes(color = primer), alpha = 0.5, size = 1) +
geom_point(aes(color = primer), alpha = 1) +
scale_colour_manual( values = c("6mer" ="#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" = "#CCBB44")) +
geom_linerange(aes(ymin = ave-sd, ymax = ave+sd), alpha=0.5)+
theme_classic() +
labs(x = "Number of reads", y = "Number of genes detected (TPM >= 1)", color = "primer") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
reads_vs_genes
knitr::opts_chunk$set(echo = TRUE)
library(gridExtra)
figS3_grid2 <- grid.arrange(reads_vs_genes, ncol = 1)
figS3_grid2
ggsave(file="figS3_grid2.svg",
width = 8.5,
height = 9,
units = c("cm"),
plot = figS3_grid2)
