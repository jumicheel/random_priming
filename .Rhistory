hb_data_2 <- hb_data_1 %>%
group_by(genes, sample2) %>%
summarise(count = n())
# function to get the s.e.m.
std <- function(x) sd(x)/sqrt(length(x))
# add 'count' column to original df (hb_data_1)
hb_data_3 <- hb_data_1 %>%
left_join(.,hb_data_2, by = c("genes", "sample2"))  %>%
distinct() %>%
# calculate ave count per bin in each sample -> convert to %
dplyr::select(genes, sample2, bin, count) %>%
mutate(percent = count/3*100) %>%
group_by(sample2, bin) %>%
summarise(ave_perc = mean(percent), sem = std(percent)) %>%
mutate(clean_bin = str_sub(bin, start = 2, end = 6),
clean_bin = str_replace(clean_bin, ",", " - "),
clean_sample = sample2)
hb_data_3$clean_sample <- factor(hb_data_3$clean_sample, levels= c("6mer", "12mer", "18mer", "24mer"))
tpm_detection <- hb_data_3 %>%
ggplot(aes(x = clean_bin, y= ave_perc, group = clean_sample)) +
geom_line(aes(color = clean_sample), size = 1, alpha = 0.4) +
geom_point(aes(color = clean_sample)) +
scale_colour_manual( values = c("6mer" ="#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" = "#CCBB44")) +
geom_linerange(aes(ymin = ave_perc-sem, ymax = ave_perc+sem))+
labs(title="", x = "TPM, log10", y = "Gene detection (%)", color = "primer") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
tpm_detection
hbr_read_gene <- rbind(tst_JM_029_6mer_HBr_tpm, tst_JM_029_12mer_HBr_tpm, tst_JM_029_18mer_HBr_tpm, tst_JM_029_24mer_HBr_tpm)
### count number of genes per primer replicate per subsample
hbr_read_gene <- hbr_read_gene %>% dplyr::filter(TPM >= 1)
#add primer column based on filename
hbr_read_gene$primer <- gsub("no0..-0_tst_JM_029_","", hbr_read_gene$filename)
hbr_read_gene$primer <- gsub("\\_.*","", hbr_read_gene$primer)
#add sample column based on primer column + filename
hbr_read_gene$sample <- paste0(hbr_read_gene$primer, gsub("^(?:[^_]+_){6}([^_]+).*", "\\1", hbr_read_gene$filename))
hbr_read_gene_count <- hbr_read_gene %>%
dplyr::count(sample, subsample) %>%
pivot_wider(names_from = subsample, values_from = n)
hbr_read_gene_count_lf <- hbr_read_gene_count %>%
pivot_longer(!sample, names_to = "reads", values_to = "genes")
hbr_read_gene_count_lf$reads <- factor(hbr_read_gene_count_lf$reads, levels= c("156250", "312500", "625000", "1250000", "2500000", "5e+06", "1e+07"))
hbr_read_gene_count_lf$primer <- gsub(".{1}$","", hbr_read_gene_count_lf$sample)
hbr_read_gene_count_lf$primer <- factor(hbr_read_gene_count_lf$primer, levels= c("6mer", "12mer", "18mer", "24mer"))
mean_genes <- hbr_read_gene_count_lf %>%
group_by(primer, reads) %>%
summarise(ave = mean(genes), sd = sd(genes))
rvsg_labels <- c("156,250", "312,500", "625,000", "1,250,000", "2,500,000", "5,000,000", "10,000,000")
## annotations created based on statistical analyses shown in the last code chunk of this markdown script
reads_vs_genes <- mean_genes %>%
ggplot(aes(x = reads, y= ave , group = primer)) +
geom_line(aes(color = primer), alpha = 0.5, size = 1) +
geom_point(aes(color = primer), alpha = 1) +
scale_colour_manual( values = c("6mer" ="#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" = "#CCBB44")) +
geom_linerange(aes(ymin = ave-sd, ymax = ave+sd), alpha=0.5)+
geom_signif(annotation = "n.s.", y_position =12700, xmin = 1, xmax = 1, tip_length = 0, size = 0) +
geom_signif(annotation = "n.s.", y_position =12700, xmin = 2, xmax = 2, tip_length = 0, size = 0) +
geom_signif(annotation = "n.s.", y_position =12700, xmin = 3, xmax = 3, tip_length = 0, size = 0) +
geom_signif(annotation = "*", y_position =12700, xmin = 4, xmax = 4, tip_length = 0, size = 0) +
geom_signif(annotation = "*", y_position =12700, xmin = 5, xmax = 5, tip_length = 0, size = 0) +
geom_signif(annotation = "**", y_position =12700, xmin = 6, xmax = 6, tip_length = 0, size = 0) +
geom_signif(annotation = "*", y_position =12700, xmin = 7, xmax = 7, tip_length = 0, size = 0) +
annotate("label", x=2, y=14000, label= "6mer vs. 18mer") +
theme_classic() +
labs(x = "Number of reads", y = "Number of genes detected (TPM >= 1)", color = "primer") +
scale_x_discrete(labels= rvsg_labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
reads_vs_genes
upset_count <- df_HBr_filt %>% dplyr::count(genes, primer)
upset_count <- upset_count %>%
pivot_wider(names_from = primer, values_from = n)
################# min 2/3 replicates
upset_count_2rep <- upset_count %>% replace(is.na(.),0)
upset_count_2rep[upset_count_2rep == 1] <- 0
upset_count_2rep[upset_count_2rep == 2] <- 1
upset_count_2rep[upset_count_2rep == 3] <- 1
upset_count_2rep <- as.data.frame(upset_count_2rep)
upset23 <- upset(upset_count_2rep,
sets = c("24mer", "18mer", "12mer", "6mer"),
order.by = "freq",
keep.order = T,
sets.bar.color=c("#CCBB44","#AA3377","#228833","#4477AA"),
sets.x.label = "Number of genes detected",
mainbar.y.label = "Number of genes")
upset23
isocount <- tst_JM_029_5000000_HBr_iso %>%
dplyr::filter(TPM >= 1) %>%
dplyr::filter(!str_detect(string = transcript_id, pattern = "PAR_Y")) %>%
group_by(filename, transcript_id) %>%
summarise(isoforms=n_distinct(transcript_id))
isocount_sum <- aggregate(isocount$isoforms, by=list(Category=isocount$filename), FUN=sum)
isocount_sum$primer <- c("6mer", "6mer", "6mer", "12mer", "12mer", "12mer","18mer", "18mer", "18mer","24mer", "24mer", "24mer")
isocount_sum$primer <- factor(isocount_sum$primer, levels= c("6mer", "12mer", "18mer", "24mer"))
total_isoforms <- isocount_sum %>%
ggplot(., aes(x = reorder(primer, primer), y = x, fill = primer, color = primer, alpha = primer)) +
geom_boxplot(width=0.5, lwd=1, fatten=2) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=1, alpha=1, color = "black") +
scale_fill_manual("legend", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_color_manual("primer", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_alpha_manual(values = c(0.4,0.4,0.4,0.4)) +
scale_y_continuous(trans = "log10", breaks = c(17500, 20000, 22500, 25000)) +
geom_signif(comparisons = list(c("6mer", "18mer")),
test = "t.test", test.args = list(var.equal = T),
map_signif_level = TRUE, tip_length = 0.02, aes(x = primer, y = x), vjust = 0.1, inherit.aes = FALSE) +
labs(x="", y="Number of isoforms detected (TPM >= 1)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust=0.7), legend.position = "none") +
guides(fill = "none")
total_isoforms
hbr_trans <- inner_join(trans, tst_JM_029_5000000_HBr_iso, by = c("tx_id_version" = "transcript_id"))
hbr_trans <- hbr_trans %>% dplyr::filter(!str_detect(string = tx_id_version, pattern = "PAR_Y"))
hbr_trans_filt <- hbr_trans %>% dplyr::filter(TPM >= 1)
## generate table from long format table %>% number of genes per GC content in each sample %>% convert to wide format
gc_table_HBr <- hbr_trans_filt %>%
dplyr::count(filename, gc_content) %>%
pivot_wider(names_from = gc_content, values_from = n)
## bins for gene count
gc_bins <- mutate(hbr_trans_filt, gc_bin = cut(gc_content, breaks=c(20, 40, 50, 60, 80)))
gc_bin_count <- gc_bins %>%
dplyr::count(filename, gc_bin) %>%
pivot_wider(names_from = gc_bin, values_from = n)
## generate long format table
gc_bin_count_lf <- gc_bin_count %>%
pivot_longer(!filename, names_to = "GC_content", values_to = "genes")
gc_bin_count_lf$sample <- gsub("_5000000_trim_clean.isoforms.results", "", gc_bin_count_lf$filename)
gc_bin_count_lf$sample <- gsub("no0..-0_tst_JM_029_", "", gc_bin_count_lf$sample)
gc_bin_count_lf$sample <- gsub("_HBr_", "", gc_bin_count_lf$sample)
gc_bin_count_lf$primer <- gc_bin_count_lf$sample
gc_bin_count_lf$primer <- gsub(".{1}$","", gc_bin_count_lf$primer)
gc_bin_count_lf$primer <- factor(gc_bin_count_lf$primer, levels= c("6mer", "12mer", "18mer", "24mer"))
gc_bins <- gc_bin_count_lf %>%
ggplot(., aes(x = reorder(primer, primer), y = genes, fill = primer,  alpha = primer, color = primer)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center', dotsize=1, alpha=1, color = "black") +
scale_fill_manual("legend", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_color_manual("legend", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_alpha_manual(values = c(0.4,0.4,0.4,0.4)) +
geom_signif(comparisons = list(c("6mer", "18mer")),
test = "t.test", test.args = list(var.equal = T),
map_signif_level = TRUE, tip_length = 0.02, aes(x = primer, y = genes), vjust = 0.1, inherit.aes = FALSE) +
facet_wrap(.~ case_when(GC_content == "(20,40]" ~ "20 - 40 %", GC_content == "(40,50]" ~ "40 - 50 %", GC_content == "(50,60]" ~ "50 - 60 %", GC_content == "(60,80]" ~ "60 - 80 %"), scales = "free_y") +
scale_y_continuous(trans = "log10" ) +
labs(title="", x="", y="Number of transcripts (TPM >= 1)") +
theme_classic() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, vjust=0.8))
#gc_bins
#annotations based on the results of the geom_signif function and the results shown in the summarizing table of statistical tests in the last code chunk of this markdown file
gc_bins_stat <- ggplot_build(gc_bins)
gc_bins_stat$data[[3]]$annotation <- c(rep("n.s.",3),rep("n.s.",3),rep("n.s.",3), rep("**",3))
## Reconstruct plot
gc_bins_stat <- ggplot_gtable(gc_bins_stat)
plot(gc_bins_stat)
hbr_length_bins <- mutate(hbr_trans_filt, bin = cut(length, breaks=c(0, 200, 1000, 2500, 100000)))
hbr_length_count <- hbr_length_bins %>%
dplyr::count(filename, bin) %>%
pivot_wider(names_from = bin, values_from = n)
names(hbr_length_count) <- c("filename", "0 - 200 bp", "200 - 1000 bp", "1000 - 2500 bp", "2500 - 100000 bp")
hbr_length_count_lf <- hbr_length_count %>% pivot_longer(!filename, names_to = "bin", values_to = "transcripts")
hbr_length_count_lf$sample <- gsub("_5000000_trim_clean.isoforms.results", "", hbr_length_count_lf$filename)
hbr_length_count_lf$sample <- gsub("no0..-0_tst_JM_029_", "", hbr_length_count_lf$sample)
hbr_length_count_lf$sample <- gsub("_HBr_", "", hbr_length_count_lf$sample)
hbr_length_count_lf$primer <- gsub(".{1}$","", hbr_length_count_lf$sample)
hbr_length_count_lf$primer <- factor(hbr_length_count_lf$primer, levels= c("6mer", "12mer", "18mer", "24mer"))
hbr_length_count_lf$bin_f <- factor(hbr_length_count_lf$bin, levels= c("0 - 200 bp", "200 - 1000 bp", "1000 - 2500 bp", "2500 - 100000 bp"))
length_bins <- hbr_length_count_lf %>%
ggplot(., aes(x = primer, y = transcripts, fill=primer, color = primer, alpha = primer)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center', dotsize=1, alpha=1, color = "black") +
scale_fill_manual("legend", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_color_manual("legend", values = c("6mer" = "#4477AA", "12mer" = "#228833", "18mer" = "#AA3377", "24mer" ="#CCBB44")) +
scale_alpha_manual(values = c(0.4,0.4,0.4,0.4)) +
geom_signif(comparisons = list(c("6mer", "18mer")),
test = "t.test", test.args = list(var.equal = T),
map_signif_level = TRUE, tip_length = 0.02, aes(x = primer, y = transcripts), vjust = 0.1, inherit.aes = FALSE) +
facet_wrap(.~ bin_f, scales = "free_y") + scale_y_continuous(trans = "log10" ) +
labs(title="", x="", y="Number of transcripts (TPM >= 1)") +
theme_classic() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, vjust=0.7))
length_bins
#annotations based on the results of the geom_signif function and the results shown in the summarizing table of statistical tests in the last code chunk of this markdown file
length_bin_stat <- ggplot_build(length_bins)
length_bin_stat$data[[3]]$annotation <- c(rep("n.s.",3),rep("*",3),rep("*",3), rep("*",3))
## Reconstruct plot
length_bin_stat <- ggplot_gtable(length_bin_stat)
plot(length_bin_stat)
# The data frame `brain_all_genes` contains all protein-coding genes detected in brain from the Human Protein Atlas (downloaded on 11 May 2023)
# get all the detected protein coding genes per replicate
genes_18mer1 <- df_HBr %>%
dplyr::filter(sample == "18mer1") %>%
dplyr::filter(tpm >= 1 & biotype == "protein_coding")
# intersect the detected genes of the replicate with genes that are detected in the brain
genes_18mer1_brain <- length(intersect(genes_18mer1$gene_name, brain_all_genes$Gene))
genes_18mer2 <- df_HBr %>%
dplyr::filter(sample == "18mer2") %>%
dplyr::filter(tpm >= 1 & biotype == "protein_coding")
genes_18mer2_brain <- length(intersect(genes_18mer2$gene_name, brain_all_genes$Gene))
genes_18mer3 <- df_HBr %>%
dplyr::filter(sample == "18mer3") %>%
dplyr::filter(tpm >= 1 & biotype == "protein_coding")
genes_18mer3_brain <- length(intersect(genes_18mer3$gene_name, brain_all_genes$Gene))
# make data frame and plot
b <- data.frame(primer = c("18mer rep. 1", "18mer rep. 2", "18mer rep. 3"), brain = c(genes_18mer1_brain / nrow(genes_18mer1), genes_18mer2_brain / nrow(genes_18mer2), genes_18mer3_brain / nrow(genes_18mer3))) %>%
dplyr::mutate(other = 1 - brain) %>%
dplyr::mutate(brain = brain * 100) %>%
dplyr::mutate(other = other * 100) %>%
pivot_longer(!primer, names_to = "tissue", values_to = "percent")
b$tissue <- factor(b$tissue, levels = c("other", "brain"))
b_plot <- b %>%
ggplot(., aes(x = primer, y = percent, fill = tissue)) +
geom_col(width = 0.5) +
scale_y_continuous(expand=c(0,0)) +
scale_fill_manual("tissue", values = c("brain" = "#009988", "other" = "#EE7733")) +
ylab(label = "% protein-coding genes") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.key=element_rect(fill="white")) +
coord_flip()
b_plot
##generating a summarising table of all samples: how many of the protein-coding genes detected do overlap with the genes expressed in the brain according to the human protein atlas
all_primers <- df_HBr %>% dplyr::filter(tpm >= 1 & biotype == "protein_coding") %>% dplyr::select(sample, gene_name)
all_primers$is <- all_primers$gene_name %in% brain_all_genes$Gene * 1
all_primers_table <- all_primers %>%
group_by(sample) %>%
summarise(sum_is = sum(is),
len = n(),
ratio = sum_is / len) %>% dplyr::mutate(ratio = ratio *100) %>% dplyr::mutate(ratio1 = 100 - ratio) %>% dplyr::mutate(sample = factor(sample, levels = c("6mer1", "6mer2", "6mer3", "12mer1", "12mer2", "12mer3", "18mer1", "18mer2", "18mer3", "24mer1", "24mer2", "24mer3"))) %>% arrange(sample) %>% dplyr::mutate("notbrain" = len - sum_is) %>% dplyr::select(sample, sum_is, notbrain, ratio, ratio1)
colnames(all_primers_table) <- c("Sample", "Expressed in brain", "Not expressed in brain", "Expressed in brain (%)", "Not expressed in brain (%)")
View(all_primers_table)
#BiocManager::install("TissueEnrich")
library(TissueEnrich)
library(tidyverse)
#library(AnnotationHub)
#library(ensembldb)
library(ggpubr)
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
library(openxlsx)
load("C:/Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/experiment1_input.RData")
##the column gene_id is "copied" into "genes"
genes <-  HBr_wf$gene_id
HBr_wf <- tst_JM_029_5000000_HBr_tpm
##the column gene_id is "copied" into "genes"
genes <-  HBr_wf$gene_id
##from the gene ids the part after the dot is removed // cropping the gene ids
genes1<-gsub("\\..*","",genes)
##genes1 (the cropped version of the gene ids) is added to DFs (and called genes in there)
HBr_wf$genes<-genes1
##HBr_wf and the gene_IDs_hsa are merged by genes/ensembl_gene_id
df_HBr <- HBr_wf %>% left_join(., gen, by = c("genes" = "gene_id"))
## create a sample column based on the filename
df_HBr$sample <- gsub("_5000000_trim_clean.genes.results", "", df_HBr$filename)
df_HBr$sample <- gsub("no0..-0_tst_JM_029_", "", df_HBr$sample)
df_HBr$sample <- gsub("_HBr_", "", df_HBr$sample)
##renaming all column names of the tables df_HBr
names(df_HBr) <- c("filename", "gene_id_version", "length", "tpm", "primer", "genes", "gene_name", "biotype", "gene_start", "gene_end", "seq_name", "seq_strand", "seq_coord_system", "description", "gene_id_version2", "canonical_transcript", "external_gene_name", "entrez_id", "sample")
df_HBr_029 <- tst_JM_029_5000000_HBr_tpm
##the column gene_id is "copied" into "genes"
genes <-  df_HBr_029$gene_id
##from the gene ids the part after the dot is removed // cropping the gene ids
genes1<-gsub("\\..*","",genes)
##genes1 (the cropped version of the gene ids) is added to DFs (and called genes in there)
df_HBr_029$genes<-genes1
##HBr_wf and the gene_IDs_hsa are merged by genes/ensembl_gene_id
df_HBr_029 <- df_HBr_029 %>% left_join(., gen, by = c("genes" = "gene_id"))
## create a sample column based on the filename
df_HBr_029$sample <- gsub("_5000000_trim_clean.genes.results", "", df_HBr_029$filename)
df_HBr_029$sample <- gsub("no0..-0_tst_JM_029_", "", df_HBr_029$sample)
df_HBr_029$sample <- gsub("_HBr_", "", df_HBr_029$sample)
##renaming all column names of the tables df_HBr
names(df_HBr_029) <- c("filename", "gene_id_version", "length", "tpm", "primer", "genes", "gene_name", "biotype", "gene_start", "gene_end", "seq_name", "seq_strand", "seq_coord_system", "description", "gene_id_version2", "canonical_transcript", "external_gene_name", "entrez_id", "sample")
f <- c()
for (i in c("6mer", "12mer", "18mer", "24mer")){
gene_list<- df_HBr_029 %>% dplyr::filter(TPM >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gs<-GeneSet(geneIds=gene_list,organism="Homo Sapiens", geneIdType=SymbolIdentifier())
gs_bckg<-GeneSet(geneIds=unique(df_HBr$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
output<-teEnrichment(inputGenes = gs, rnaSeqDataset = 1, tissueSpecificGeneType = 1, backgroundGenes = gs_bckg)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
print(paste(i, "has", enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes, "cerebral cortex specific genes"))
f <- c(f, enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes)
dataset_name <- paste("result_029", i, sep = "_")
assign(dataset_name, enrichmentOutput)
}
gene_list<- df_HBr_029 %>% dplyr::filter(tpm >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
for (i in c("6mer", "12mer", "18mer", "24mer")){
gene_list<- df_HBr_029 %>% dplyr::filter(tpm >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gs<-GeneSet(geneIds=gene_list,organism="Homo Sapiens", geneIdType=SymbolIdentifier())
gs_bckg<-GeneSet(geneIds=unique(df_HBr$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
output<-teEnrichment(inputGenes = gs, rnaSeqDataset = 1, tissueSpecificGeneType = 1, backgroundGenes = gs_bckg)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
print(paste(i, "has", enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes, "cerebral cortex specific genes"))
f <- c(f, enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes)
dataset_name <- paste("result_029", i, sep = "_")
assign(dataset_name, enrichmentOutput)
}
load("C:/Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/experiment2_input1.RData")
#load("/home/bioinf/R_main/primers/tst_JM_040_genes_subsample.RData")
df_HBr_040 <- tst_JM_040_genes_30000000
##the column gene_id is "copied" into "genes"
genes <-  df_HBr_040$gene_id
##from the gene ids the part after the dot is removed // cropping the gene ids
genes1<-gsub("\\..*","",genes)
##genes1 (the cropped version of the gene ids) is added to DFs (and called genes in there)
df_HBr_040$genes<-genes1
##HBr_wf and the gene_IDs_hsa are merged by genes/ensembl_gene_id
df_HBr_040 <- df_HBr_040 %>% left_join(., gen, by = c("genes" = "gene_id"))
df_HBr_040$sample <- gsub("_30000000.genes.results", "", df_HBr_040$filename)
df_HBr_040$sample <- gsub("no0..-0_tst_JM_040_2_", "", df_HBr_040$sample)
df_HBr_040$sample <- gsub("_HBr_", "", df_HBr_040$sample)
df_HBr_040 <- df_HBr_040
#
f <- c()
for (i in c("6mer", "12mer", "18mer", "24mer")){
gene_list<- df_HBr %>% dplyr::filter(TPM >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gs<-GeneSet(geneIds=gene_list,organism="Homo Sapiens", geneIdType=SymbolIdentifier())
gs_bckg<-GeneSet(geneIds=unique(df_HBr$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
output<-teEnrichment(inputGenes = gs, rnaSeqDataset = 1, tissueSpecificGeneType = 1, backgroundGenes = gs_bckg)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
print(paste(i, "has", enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes, "cerebral cortex specific genes"))
f <- c(f, enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes)
dataset_name <- paste("result_040", i, sep = "_")
assign(dataset_name, enrichmentOutput)
}
gene_list<- df_HBr %>% dplyr::filter(tpm >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
for (i in c("6mer", "12mer", "18mer", "24mer")){
gene_list<- df_HBr %>% dplyr::filter(tpm >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gs<-GeneSet(geneIds=gene_list,organism="Homo Sapiens", geneIdType=SymbolIdentifier())
gs_bckg<-GeneSet(geneIds=unique(df_HBr$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
output<-teEnrichment(inputGenes = gs, rnaSeqDataset = 1, tissueSpecificGeneType = 1, backgroundGenes = gs_bckg)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
print(paste(i, "has", enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes, "cerebral cortex specific genes"))
f <- c(f, enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes)
dataset_name <- paste("result_040", i, sep = "_")
assign(dataset_name, enrichmentOutput)
}
annot_df <- data.frame(batch = c(rep("Experiment 1", 4), rep("Experiment 2", 4)))
heatmap_df <- data.frame(tissue = rownames(result_029_6mer), primers = c("6mer1", "12mer1", "18mer1", "24mer1", "6mer2", "12mer2", "18mer2", "24mer2"), log10p = c(result_029_6mer$Log10PValue, result_029_12mer$Log10PValue, result_029_18mer$Log10PValue, result_029_24mer$Log10PValue, result_040_6mer$Log10PValue, result_040_12mer$Log10PValue, result_040_18mer$Log10PValue, result_040_24mer$Log10PValue)) %>% pivot_wider(names_from = primers, values_from = log10p) %>% column_to_rownames(var="tissue") %>% as.matrix()
ht <- ComplexHeatmap::pheatmap(heatmap_df, cluster_rows = FALSE, cluster_cols = FALSE, gaps_col = 4, display_numbers = F, column_names_side = c("top"), border_color = "white", color=colorRampPalette(c("grey90", "darkgreen"))(n = 256), row_names_side = c("left"), angle_col = c("0"), labels_col = c("6mer", "12mer", "18mer", "24mer", "6mer", "12mer", "18mer", "24mer"), heatmap_legend_param = list(title = expression(bold(-log["10"]~"adjusted" ~ bolditalic(P)))), fontfamily = "Helvetica")
ht
save(df_HBr_029, df_HBr_040, file="C://Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/tissue_enrichment_input.RData")
load("C:/Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/tissue_enrichment_input.RData")
f <- c()
for (i in c("6mer", "12mer", "18mer", "24mer")){
gene_list<- df_HBr_029 %>% dplyr::filter(tpm >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gs<-GeneSet(geneIds=gene_list,organism="Homo Sapiens", geneIdType=SymbolIdentifier())
gs_bckg<-GeneSet(geneIds=unique(df_HBr$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
output<-teEnrichment(inputGenes = gs, rnaSeqDataset = 1, tissueSpecificGeneType = 1, backgroundGenes = gs_bckg)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
print(paste(i, "has", enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes, "cerebral cortex specific genes"))
f <- c(f, enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes)
dataset_name <- paste("result_029", i, sep = "_")
assign(dataset_name, enrichmentOutput)
}
gs_bckg<-GeneSet(geneIds=unique(df_HBr_029$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
f <- c()
for (i in c("6mer", "12mer", "18mer", "24mer")){
gene_list<- df_HBr_029 %>% dplyr::filter(tpm >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gs<-GeneSet(geneIds=gene_list,organism="Homo Sapiens", geneIdType=SymbolIdentifier())
gs_bckg<-GeneSet(geneIds=unique(df_HBr_029$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
output<-teEnrichment(inputGenes = gs, rnaSeqDataset = 1, tissueSpecificGeneType = 1, backgroundGenes = gs_bckg)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
print(paste(i, "has", enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes, "cerebral cortex specific genes"))
f <- c(f, enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes)
dataset_name <- paste("result_029", i, sep = "_")
assign(dataset_name, enrichmentOutput)
}
#
f <- c()
for (i in c("6mer", "12mer", "18mer", "24mer")){
gene_list<- df_HBr %>% dplyr::filter(tpm >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gs<-GeneSet(geneIds=gene_list,organism="Homo Sapiens", geneIdType=SymbolIdentifier())
gs_bckg<-GeneSet(geneIds=unique(df_HBr$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
output<-teEnrichment(inputGenes = gs, rnaSeqDataset = 1, tissueSpecificGeneType = 1, backgroundGenes = gs_bckg)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
print(paste(i, "has", enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes, "cerebral cortex specific genes"))
f <- c(f, enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes)
dataset_name <- paste("result_040", i, sep = "_")
assign(dataset_name, enrichmentOutput)
}
for (i in c("6mer", "12mer", "18mer", "24mer")){
gene_list<- df_HBr %>% dplyr::filter(tpm >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gs<-GeneSet(geneIds=gene_list,organism="Homo Sapiens", geneIdType=SymbolIdentifier())
gs_bckg<-GeneSet(geneIds=unique(df_HBr_040$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
output<-teEnrichment(inputGenes = gs, rnaSeqDataset = 1, tissueSpecificGeneType = 1, backgroundGenes = gs_bckg)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
print(paste(i, "has", enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes, "cerebral cortex specific genes"))
f <- c(f, enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes)
dataset_name <- paste("result_040", i, sep = "_")
assign(dataset_name, enrichmentOutput)
}
gene_list<- df_HBr_040 %>% dplyr::filter(tpm >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gene_list<- df_HBr_040 %>% dplyr::filter(TPM >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
#
f <- c()
for (i in c("6mer", "12mer", "18mer", "24mer")){
gene_list<- df_HBr_040 %>% dplyr::filter(TPM >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gs<-GeneSet(geneIds=gene_list,organism="Homo Sapiens", geneIdType=SymbolIdentifier())
gs_bckg<-GeneSet(geneIds=unique(df_HBr_040$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
output<-teEnrichment(inputGenes = gs, rnaSeqDataset = 1, tissueSpecificGeneType = 1, backgroundGenes = gs_bckg)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
print(paste(i, "has", enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes, "cerebral cortex specific genes"))
f <- c(f, enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes)
dataset_name <- paste("result_040", i, sep = "_")
assign(dataset_name, enrichmentOutput)
}
annot_df <- data.frame(batch = c(rep("Experiment 1", 4), rep("Experiment 2", 4)))
heatmap_df <- data.frame(tissue = rownames(result_029_6mer), primers = c("6mer1", "12mer1", "18mer1", "24mer1", "6mer2", "12mer2", "18mer2", "24mer2"), log10p = c(result_029_6mer$Log10PValue, result_029_12mer$Log10PValue, result_029_18mer$Log10PValue, result_029_24mer$Log10PValue, result_040_6mer$Log10PValue, result_040_12mer$Log10PValue, result_040_18mer$Log10PValue, result_040_24mer$Log10PValue)) %>% pivot_wider(names_from = primers, values_from = log10p) %>% column_to_rownames(var="tissue") %>% as.matrix()
ht <- ComplexHeatmap::pheatmap(heatmap_df, cluster_rows = FALSE, cluster_cols = FALSE, gaps_col = 4, display_numbers = F, column_names_side = c("top"), border_color = "white", color=colorRampPalette(c("grey90", "darkgreen"))(n = 256), row_names_side = c("left"), angle_col = c("0"), labels_col = c("6mer", "12mer", "18mer", "24mer", "6mer", "12mer", "18mer", "24mer"), heatmap_legend_param = list(title = expression(bold(-log["10"]~"adjusted" ~ bolditalic(P)))), fontfamily = "Helvetica")
ht
load("C:/Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/tissue_enrichment_input.RData")
#BiocManager::install("TissueEnrich")
library(TissueEnrich)
library(tidyverse)
#library(AnnotationHub)
#library(ensembldb)
library(ggpubr)
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
library(openxlsx)
#df_HBr_029 <- tst_JM_029_5000000_HBr_tpm
##the column gene_id is "copied" into "genes"
#genes <-  df_HBr_029$gene_id
##from the gene ids the part after the dot is removed // cropping the gene ids
#genes1<-gsub("\\..*","",genes)
##genes1 (the cropped version of the gene ids) is added to DFs (and called genes in there)
#df_HBr_029$genes<-genes1
##get gene and transcript info
#human_ens <- query(AnnotationHub(), c("homo sapiens", "EnsDb"))
#human_ens <- human_ens[["AH98047"]]
#gen <- genes(human_ens, return.type = "data.frame")
##HBr_wf and the gene_IDs_hsa are merged by genes/ensembl_gene_id
#df_HBr_029 <- df_HBr_029 %>% left_join(., gen, by = c("genes" = "gene_id"))
## create a sample column based on the filename
#df_HBr_029$sample <- gsub("_5000000_trim_clean.genes.results", "", df_HBr_029$filename)
#df_HBr_029$sample <- gsub("no0..-0_tst_JM_029_", "", df_HBr_029$sample)
#df_HBr_029$sample <- gsub("_HBr_", "", df_HBr_029$sample)
##renaming all column names of the tables df_HBr
#names(df_HBr_029) <- c("filename", "gene_id_version", "length", "tpm", "primer", "genes", "gene_name", "biotype", "gene_start", "gene_end", "seq_name", "seq_strand", "seq_coord_system", "description", "gene_id_version2", "canonical_transcript", "external_gene_name", "entrez_id", "sample")
#
#save(df_HBr_029, df_HBr_040, file="C://Users/Julia/Desktop/Promotion/projects/random_priming/publication/random_priming_github/random_priming/random_priming/tissue_enrichment_input.RData")
f <- c()
for (i in c("6mer", "12mer", "18mer", "24mer")){
gene_list<- df_HBr_029 %>% dplyr::filter(tpm >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gs<-GeneSet(geneIds=gene_list,organism="Homo Sapiens", geneIdType=SymbolIdentifier())
gs_bckg<-GeneSet(geneIds=unique(df_HBr_029$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
output<-teEnrichment(inputGenes = gs, rnaSeqDataset = 1, tissueSpecificGeneType = 1, backgroundGenes = gs_bckg)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
print(paste(i, "has", enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes, "cerebral cortex specific genes"))
f <- c(f, enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes)
dataset_name <- paste("result_029", i, sep = "_")
assign(dataset_name, enrichmentOutput)
}
#df_HBr_040 <- tst_JM_040_genes_30000000
##the column gene_id is "copied" into "genes"
#genes <-  df_HBr_040$gene_id
##from the gene ids the part after the dot is removed // cropping the gene ids
#genes1<-gsub("\\..*","",genes)
##genes1 (the cropped version of the gene ids) is added to DFs (and called genes in there)
#df_HBr_040$genes<-genes1
##get gene and transcript info
#human_ens <- query(AnnotationHub(), c("homo sapiens", "EnsDb"))
#human_ens <- human_ens[["AH98047"]]
#gen <- genes(human_ens, return.type = "data.frame")
#trans <- transcripts(human_ens, return.type = "data.frame")
##HBr_wf and the gene_IDs_hsa are merged by genes/ensembl_gene_id
#df_HBr_040 <- df_HBr_040 %>% left_join(., gen, by = c("genes" = "gene_id"))
## create a sample column based on the filename
#df_HBr_040$sample <- gsub("_30000000.genes.results", "", df_HBr_040$filename)
#df_HBr_040$sample <- gsub("no0..-0_tst_JM_040_2_", "", df_HBr_040$sample)
#df_HBr_040$sample <- gsub("_HBr_", "", df_HBr_040$sample)
#df_HBr_040 <- df_HBr_040
#
f <- c()
for (i in c("6mer", "12mer", "18mer", "24mer")){
gene_list<- df_HBr_040 %>% dplyr::filter(TPM >= 1) %>% dplyr::filter(primer == i) %>%  pull("gene_name") %>% unique()
gs<-GeneSet(geneIds=gene_list,organism="Homo Sapiens", geneIdType=SymbolIdentifier())
gs_bckg<-GeneSet(geneIds=unique(df_HBr_040$gene_name),organism="Homo Sapiens", geneIdType=SymbolIdentifier())
output<-teEnrichment(inputGenes = gs, rnaSeqDataset = 1, tissueSpecificGeneType = 1, backgroundGenes = gs_bckg)
seEnrichmentOutput<-output[[1]]
enrichmentOutput<-setNames(data.frame(assay(seEnrichmentOutput),row.names = rowData(seEnrichmentOutput)[,1]), colData(seEnrichmentOutput)[,1])
enrichmentOutput$Tissue<-row.names(enrichmentOutput)
print(paste(i, "has", enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes, "cerebral cortex specific genes"))
f <- c(f, enrichmentOutput[enrichmentOutput$Tissue == "Cerebral Cortex", ]$Tissue.Specific.Genes)
dataset_name <- paste("result_040", i, sep = "_")
assign(dataset_name, enrichmentOutput)
}
annot_df <- data.frame(batch = c(rep("Experiment 1", 4), rep("Experiment 2", 4)))
heatmap_df <- data.frame(tissue = rownames(result_029_6mer), primers = c("6mer1", "12mer1", "18mer1", "24mer1", "6mer2", "12mer2", "18mer2", "24mer2"), log10p = c(result_029_6mer$Log10PValue, result_029_12mer$Log10PValue, result_029_18mer$Log10PValue, result_029_24mer$Log10PValue, result_040_6mer$Log10PValue, result_040_12mer$Log10PValue, result_040_18mer$Log10PValue, result_040_24mer$Log10PValue)) %>% pivot_wider(names_from = primers, values_from = log10p) %>% column_to_rownames(var="tissue") %>% as.matrix()
ht <- ComplexHeatmap::pheatmap(heatmap_df, cluster_rows = FALSE, cluster_cols = FALSE, gaps_col = 4, display_numbers = F, column_names_side = c("top"), border_color = "white", color=colorRampPalette(c("grey90", "darkgreen"))(n = 256), row_names_side = c("left"), angle_col = c("0"), labels_col = c("6mer", "12mer", "18mer", "24mer", "6mer", "12mer", "18mer", "24mer"), heatmap_legend_param = list(title = expression(bold(-log["10"]~"adjusted" ~ bolditalic(P)))), fontfamily = "Helvetica")
ht
View(heatmap_df)
